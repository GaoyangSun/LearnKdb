文件配置
q.k 文件包含operators, .Q.res返回用C语言写的operators
s.k 文件用来使用sql （odbc）

file handles
0 STDIN - user input
1 STDOUT - program output
2 STDERR - errors
-1 append a line
1 "hello world\n"; = -1 "hello world";

q k 转换
\  q->k  (或报错时，从debugger mode返回正常模式）
再\ k->q

：assign
对一个变量赋值可以发生在任何位置
x*x: til 10 -> x:til 10; x*x

产生随机数
10?5 产生10个最大值为5-1的随机正整数
10?5f 产生10个最大值为5的随机正浮点数
10?0i 产生10个随机整数
10?00:00 / 10?00:00:00 / 10?00:00:00.000 / 10?0D 产生随机的time
10?2020.01.01 在下一个4年中产生随机的date
10?2020.01.01T 产生最小值为2000.01.01 最大值为2020.01.01T的timestamp

deal随机数
-5？10 不放回的产生最大值为10-1的随机正整数
rand 10 产生一个最大值为10-1的随机正整数
rand -> k){*1?x}  (in k, * means first, | means reverse, therefore *| means last.)

产生随机非数
10?0Nc / 10?" " 产生10个字母string
10?`2 产生10个长度为2的字母symbol

用环境变量选取随机数
.Q.a 小写字母 .Q.A 大写字母 .Q.n 数字 .Q.nA 数字+大写字母 .Q.an 小写字母+下划线+数字
10?.Q.a 选取随机字幕10次

kdb扑克牌
deck: "23456789TJQKA" cross "DCHS"
-7?deck 抽7张牌
-52?deck 洗牌

随机种子
\S -> -314159i
\S 100 -> 设置随机种子
system "S ", string 1+"i"$.z.T  -> .z.T -> 现在时间hms "i"$.z.T 转化为miniseconds

函数最多接受8个参数
x,y,z自动成为函数的args，不需要额外声明，但顺序必须为x y z. 若函数中只有y但没有x，此函数被认为接受两个参数
函数后加[] 是函数的标准形式

[1] 将uniform distribution 转化为 normal distribution.
clt -> the sum of independently drawn samples from the same distribution tend to a normal distribution irrespective of the original distribution
u20:{-10f + sum 20?1f} 
调用方式 -> u20 0,  u20[]
-16!u20 -> return 1, 意思是有一个{-10f + sum 20?1f} 对应的函数
产生多个正态分布数 
.stat.u20: {-10f + sum x cut (20*x)?1f}

.stat.skew:{avg[x*x2]%sqrt m2*m2*m2: avg x2: x*x-: avg x}
.stat.skew: {avg[x*x*x]%sqrt v2*v2*v2: avg x*x-:avg x}
.stat.kurt:{-3f + avg[x2*x2]%x*x: avg x2: x*x-: avg x}
.stat.kurt: {-3f + avg[x*x*x*x]%v2*v2: avg x*x-:avg x}

speed: x:x-avg x slower than x-:avg x, as the former has to copy x, instead of 就地修改

[2] box-muller
.stat.bm:{
    if[count[x] mod 2;'length];
    x: 2 0N#x;
    r: sqrt -2f*log x 0;
    theta: 2f*acos[-1]*x 1;
    x: r*cos theta;
    x,: r*sin theta;
    x}
'length -> 抛出length error
2 0N#x -> x.reshape(2,-1)
0 3 _ til 5 -> (0 1 2; 3 4)

[3] Beasley-Springer-Moro
.stat.cnorminv: { a:-25.44106049637 41.39119773534 -18.61500062529 2.50662823884; 
                  b: 3.13082909833 -21.06224101826 23.08336743743 -8.47351093090 1; 
                  x*:horner[a;s]%horner[b] s:x*x-:.5;
                  x}
.stat.horner:{{z+y*x}[y]/[x]}
该函数接收两个参数，x->数列，y->乘数
{z+y*x}中的x和/[x]中的x没有任何关系，/[x]中的x是整个函数的第一个参数，为数列
{z+y*x}中的x是用来循环数列中的第一个数（z为第二个数）
note：无论如何操作，第一个数都原样返回 -> ({(x*5) + y*10}\) 1 2 3 4f -> 1 25 155 815f

a: 1 2 3 4 5f; b:2f
.stat.horner[a] 2f ~ 2f sv a 

ewma: {{(y*1-x) + z*x}[x]\[y]}
ewma[0.25] 1 2 3 4 5f
speed: atomic operation like z*x is time-consuming(?), and should be removed from iteration, use this below instead
(y*1-x)中的y是prev res，z是现在的值，而每次都会计算z*x这个新增变量，没有必要，可以先算好，再直接对z*x循环
ewma: {{z+y*x}\[first y; 1-x; x*y]}
其中，{z+y*x}\[0;.9;.1*til 5] 可以简写成 0 (.9)\ til 5
-> ewma:{first[y](1f-x)\x*y}   意思是 {first[y] (1f-x)\ x*y}

.stat.tnorminv:{ a:0.0000003960315187 0.0000002888167364 0.0000321767881768 0.0003951896511919 0.0038405729373609 0.0276438810333863 0.1607979714918209 0.9761690190917186 0.3374754822726147; 
                  x:horner[a] log neg log 1f-x;
                  x}

.stat.norminv:{ i:x<.5; 
          x:?[i;1f-x;x]; 
          x:?[x<.92;cnorminv x;tnorminv x]; 
          x:?[i;neg x;x];
          x}


文件路径
` sv `stat`q -> `stat.q
` vs `stat.q -> `stat`q
key `:stat.q -> 若路径存在，则返回`:stat.q/ 若不存在，则返回空值
if[f~key f;system "l ", 1_string f] 确认路径f存在后再load


~和=的区别
(1 2 3) = 1 2 3 -> 111b
(1 2 3) ~ 1 2 3 -> 1b
0 = 0f -> 1b
0 ~ 0f -> 0b

路径使用环境变量
`HOME setenv "/tmp"
libdir: hsym `$getenv`HOME 
getenv`HOME -> "/tmp", `$getenv`HOME -> `/tmp, hsym `$getenv`HOME -> `:/tmp

\v -> show all variables, \f -> show all functions
\c 20 1000 -> （\v等的结果）展示20行，每行1000字

创建一个新的namespace -> mapping from symbols to values
qtips.a:1
qtips.b:2
\v qtips -> `a`b

directories -> special namespaces that begin with ./ cannot contain a view/ cannot load partioned database
key ` -> `q`Q`h`j`o
\v .q -> ,`csv
.q -> all k-implemented q functions
.Q -> database-maintenace functions
.h -> builtin web server functions
.j -> JSON implementation function
.o -> ODBC functons
创建新的directory
.qtips.a:1
.qtips.b:1
\d namespace -> 切换namespace e.g. \d .o, 此时前缀从q)变为q.o)

.util.use:{system["d"] upsert $[99h=type v:get x;v;(-1#` vs x)!1#v]}
use `.stat.skew -> 单独import一个function
use `.stat -> import整个包

随机游走
.stat.gbm:{[s;r;t;z]exp(t*r-.5*s*s)+z*s*sqrt t}
s->sigma r->rate of drift t->timestep z->normal random realization
speed: 0.5*x is faster than x%2
\p -> 保留几位有效数字， \p 0->所有位
percision: a=b -> 两数差别小于大数的2^-43就算相等，所以要保证真正的相等，使用 0=a-b
.stat.gbm[.30;.05;1%252] .stat.norminv 252?1f

时间
"i"$2000.01.01 -> 0i
2000.01.01 + til 3 -> 2000.01.01 2000.01.02 2000.01.03
2000.01.01 mod 7 -> 0i 2000.01.01是星期六 因此有下式
.util.wday:{x where 1<x mod 7}
.z.D -> 当前日期  .z.d -> 当前GMT日期
.z.T -> 当前hms  .z.t -> 当前GMThms
.z.N -> 当前timespan .z.n -> 当前GMTtimespan
.z.Z -> 当前datetime .z.z -> 当前GMTdatetime    2021.10.04T03:27:52.603z
.z.P -> 当前timestamp .z.p -> 当前GMTtimestamp  2021.10.04T03:33:54.972781p

00:00 -> minutes 00:00:00 -> seconds 00:00:00.000 -> miniseconds
0D -> nanoseconds 0D00:00:00.000000000
datetime存储方式为double，由于.z.Z只打印3位小数s，误差大于datetime的容忍误差，datetime不应该当做字典的key
timestamp存储方式为8-byte integer, 因此比较是精准的

deltas/ratios/differ/prev -> both monadic and dyadic -> deltas lst / deltas[first lst;lst]

.sim.path:{[s;r;t] 
           z:.stat.norminv count[t]?1f; 
           p:prds .stat.gbm[s;r;deltas[first t;t]] z;
           p}
.util.rng:{[w;s;e]s+w*til ceiling(e-s)%w} -
.Q.addmonths[2000.01.01;0 2] -> (2000-01-01d;2000-03-01d)
.util.rng[1] . .Q.addmonths[2000.01.01;0 2] -> .util.rng[1;2000.01.01;2000.03.01] 这里的.接受多个参数 / 把w作为第一个参数，可以不用在rng后加[]
myadd:{x+y+z}; myadd[1] . 2 3 -> 6
.util.rnd:{x*"j"$y%x} j->8-byte integer



